namespace ReSourcer
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.IO;
    using System.IO.Compression;
    using System.Linq;
    using System.Reflection;
    using System.Text;
    using System.Threading;
    using System.Threading.Tasks;
    using System.Windows.Forms;
    using System.Xml.Serialization;

    /// <summary>
    /// Handles game location, configuration location, command recording, and demo management
    /// to make Source engine games easier to deal with.
    /// </summary>
    public class GameManager : IEquatable<GameManager>
    {
        #region Properties

        /// <summary>
        /// Data property for storing the games unique "record" command.
        /// </summary>
        public string RecordCommand { get; set; }

        /// <summary>
        /// Data property for storing the user defined game name.
        /// </summary>
        public string GameName { get; set; }

        /// <summary>
        /// Data property for storing the name of the executable.
        /// </summary>
        public string GameExe
        {
            get
            {
                return GamePath.Split('\\').Last();
            }
        }

        /// <summary>
        /// Data property for storing the game executable's absolute path.
        /// </summary>
        public string GamePath { get; set; }


        /// <summary>
        /// Data property for getting the game's specific autoexec.cfg file.
        /// Searches all subdirectories within the current 
        /// working directory given by the GamePath
        /// and returns a null if more than one or none is, 
        /// or are, found.
        /// </summary>
        public string AutoExecAbsPath
        {
            get
            {
                string cword = GamePath.Remove(GamePath.IndexOf(GameExe), GameExe.Length);
                string path = "";

                if (cword != "")
                {
                    path = Directory.GetFiles(cword,
                    "autoexec.cfg",
                    SearchOption.AllDirectories).SingleOrDefault();

                    if (path == "" || path == null)
                    {
                        path = Directory.GetDirectories(cword,
                          "cfg",
                          SearchOption.AllDirectories).SingleOrDefault();
                        using (StreamWriter sw = File.CreateText(path + "\\autoexec.cfg"))
                        {
                            sw.WriteLine("// Automatically generated by Source Game Demo Manager");
                        }

                        path += "\\autoexec.cfg";
                    }
                }

                return path;
            }
        }

        public string RecorderCfgPath
        {
            get => (AutoExecAbsPath == "") ? "" : Directory.GetParent(AutoExecAbsPath).ToString() + "\\AutoRecorder.cfg";
        }

        public string DemosDirectory
        {
            get
            {
                if (AutoExecAbsPath != "")
                {
                    string parentDir =
                   Directory.GetParent(Directory.GetParent(RecorderCfgPath).ToString()).ToString();
                    try
                    {
                        Directory.GetFiles(parentDir + "\\demos").SingleOrDefault();
                    }
                    catch
                    {
                        Directory.CreateDirectory(parentDir + "\\demos").ToString();
                    }
                    return parentDir + "\\demos";
                }
                else
                {
                    return "";
                }
            }
        }


        #endregion

        #region Constructors
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GameManager()
        {
            GameName = string.Empty;
            GamePath = string.Empty;
            RecordCommand = string.Empty;
        }

        /// <summary>
        /// Shallow copy constructor.
        /// </summary>
        /// <param name="instance"></param>
        public GameManager(GameManager instance)
        {
            var newGameManager = instance.MemberwiseClone();
        }

        /// <summary>
        /// Initializing constructor.
        /// </summary>
        /// <param name="gameName"></param>
        /// <param name="recordCommand"></param>
        /// <param name="gameExe"></param>
        /// <param name="gamePath"></param>
        /// <param name="configPath"></param>
        public GameManager(string gameName, string recordCommand,
                           string gamePath, string configPath)
        {
            this.GameName = gameName;
            this.RecordCommand = recordCommand;
            this.GamePath = gamePath;
        }

        /// <summary>
        /// Initializing constructor where game path is selected instead of given.
        /// </summary>
        /// <param name="gameName"></param>
        /// <param name="recordCommand"></param>
        /// <param name="gameExe"></param>
        public GameManager(string gameName, string recordCommand)
        {
            this.GameName = gameName;
            this.RecordCommand = recordCommand;
            this.GamePath = SelectGamePath();
        }

        public GameManager(string gameName)
        {
            this.GameName = gameName;
            this.RecordCommand = "alias +showexec \"+showscores; exec AutoRecorder.cfg\"; alias -showexec \"-showscores\"; bind TAB +showexec;";
            this.GamePath = SelectGamePath();
        }

        #endregion

        #region Class Methods

        /// <summary>
        /// Asks the user to provide a game path for an instance of a manager object.
        /// </summary>
        /// <returns></returns>
        public string SelectGamePath()
        {
            string path = string.Empty;
            DialogResult dr = DialogResult.No;

            while (dr != DialogResult.Yes)
            {
                using (var opd = new OpenFileDialog())
                {
                    opd.Filter = GameName + "|" + "*.exe";
                    if (opd.ShowDialog() == DialogResult.OK)
                    {
                        path = opd.FileName;
                    }
                    else
                    {
                        // User has chosen to cancel the file dialog screen.
                        break;
                    }
                    dr = MessageBox.Show("Are you sure this file is right?",
                                     "Select Game",
                                     MessageBoxButtons.YesNo,
                                     MessageBoxIcon.Question);
                }
            }

            return path;
        }

        public override string ToString()
        {
            return String.Format("{0}\n{1}\n{2}\n{3}\n{4}", this.GameName, this.GameExe,
                                                            this.RecordCommand, this.GamePath,
                                                            this.AutoExecAbsPath);
        }

        /// <summary>
        /// Start the game process and begin AutoRecorder functionality.
        /// </summary>
        public void Start()
        {
            string recordCommand = "";
            string args = "-steam -secure";
            using (var p = new Process())
            {
                try
                {
                    TimeSpan interval = new TimeSpan(0, 0, 2);
                    // Courtesy checking for record command that may have not been removed
                    // and is hidden somewhere in the autoexec.
                    RemoveAutoCommand(AutoExecAbsPath, RecordCommand);
                    WriteAutoCommand(AutoExecAbsPath, RecordCommand);
                    p.StartInfo.FileName = GamePath;
                    p.StartInfo.Arguments = args;
                    p.Start();

                    do
                    {
                        recordCommand = "demo_"
                                         + DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
                        WriteRecorderCommand(RecorderCfgPath, recordCommand);
                        Thread.Sleep(interval);
                    } while (!p.HasExited);

                    // Remove any value from the record config so as to not accidentally
                    // overwite an old demo file that may not have been moved.
                    WriteRecorderCommand(RecorderCfgPath, "");

                    // Archive demos
                    Task.Factory.StartNew(MoveAndArchiveDemo);

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message,
                                    "Error",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                }
                RemoveAutoCommand(AutoExecAbsPath, RecordCommand);
            }
        }
        /// <summary>
        /// Start the game process and begin AutoRecorder functionality.
        /// </summary>
        /// <param name="extraArgs"></param>
        public void Start(string extraArgs)
        {
            string fileSetup = "";
            string args = "-steam -secure " + extraArgs;
            using (var p = new Process())
            {
                try
                {
                    p.StartInfo.FileName = GamePath;
                    p.StartInfo.Arguments = args;
                    p.Start();

                    do
                    {
                        fileSetup = "demo_"
                                         + DateTime.Now.ToString("yyyy-MM-dd_HH:mm:ss");
                    } while (!p.HasExited);

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message,
                                    "Error",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                }
            }
        }

        /// <summary>
        /// Start the game process and begin AutoRecorder functionality.
        /// </summary>
        /// <param name="p"></param>
        public void Start(ref Process p)
        {
            string fileSetup = "";
            string args = "-steam -secure";
            using (p = new Process())
            {
                try
                {
                    p.StartInfo.FileName = GamePath;
                    p.StartInfo.Arguments = args;
                    p.Start();

                    do
                    {
                        fileSetup = "demo_"
                                         + DateTime.Now.ToString("yyyy-MM-dd_HH:mm:ss");
                    } while (!p.HasExited);

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message,
                                    "Error",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                }
            }
        }

        /// <summary>
        /// Start the game process and begin AutoRecorder functionality.
        /// </summary>
        /// <param name="p"></param>
        /// <param name="extraArgs"></param>
        public void Start(ref Process p, string extraArgs)
        {
            string fileSetup = "";
            string args = "-steam -secure " + extraArgs;
            using (p = new Process())
            {
                try
                {
                    p.StartInfo.FileName = GamePath;
                    p.StartInfo.Arguments = args;
                    p.Start();

                    do
                    {
                        fileSetup = "demo_"
                                         + DateTime.Now.ToString("yyyy-MM-dd_HH:mm:ss");
                    } while (!p.HasExited);

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message,
                                    "Error",
                                    MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                }
            }
        }

        private void MoveAndArchiveDemo()
        {
            foreach (var s in Directory.GetFiles(Directory.GetParent(DemosDirectory).ToString()))
            {
                string fileName = s.Split('\\').Last();
                if (fileName.StartsWith("demo_") && fileName.EndsWith(".dem"))
                {
                    string timeStamp = s.Split('_')[1];

                    if (timeStamp.EndsWith(".dem"))
                    {
                        timeStamp = timeStamp.Split('.')[0];
                    }

                    string newDir = Directory.CreateDirectory(Path.Combine(DemosDirectory, timeStamp)).FullName;

                    File.Move(s, Path.Combine(newDir, fileName));
                }
            }

            foreach (var s in Directory.GetDirectories(DemosDirectory))
            {
                ZipFile.CreateFromDirectory(s, s + ".zip", CompressionLevel.Optimal, false);
                DirectoryInfo di = new DirectoryInfo(s);

                foreach(var file in di.GetFiles())
                {
                    file.Delete();
                }
                Directory.Delete(s);
            }
        }

        public bool Equals(GameManager other)
        {
            return null != other && GamePath == other.GamePath;
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as GameManager);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hash = 17;
                hash = hash * 23 + this.GamePath.GetHashCode();
                return hash;
            }
        }

        #endregion

        #region Static Methods

        /// <summary>
        /// Asks the user to find the path for a non-instanced specified game exe.
        /// Ensures the user selects a file of at least the same name
        /// and extension.
        /// </summary>
        /// <param name="gameName"></param>
        /// <param name="gameExe"></param>
        /// <returns></returns>
        public static string SelectGamePath(string gameName)
        {
            string path = string.Empty;
            do
            {
                using (var opd = new OpenFileDialog())
                {
                    opd.Filter = gameName + "|" + "*.exe";
                    if (opd.ShowDialog() == DialogResult.OK)
                    {
                        path = opd.FileName;
                    }
                }
            } while (MessageBox.Show("Are you sure this file is right?",
                                     "Select Game",
                                     MessageBoxButtons.YesNo,
                                     MessageBoxIcon.Question) == DialogResult.No);

            return path;
        }

        /// <summary>
        /// Writes a record command to be bound to a key on game startup.
        /// </summary>
        /// <param name="autoexecPath"></param>
        /// <param name="command"></param>
        private static void WriteAutoCommand(string autoexecPath, string command)
        {
            using (StreamWriter sw = File.AppendText(autoexecPath))
            {
                sw.WriteLine(command);
            }
        }

        private static void RemoveAutoCommand(string autoexecPath, string command)
        {
            File.WriteAllLines(autoexecPath,
                               File.ReadLines(autoexecPath).Where(s => s != command).ToList());
        }

        private static void WriteRecorderCommand(string recorderPath, string command)
        {
            using (StreamWriter sw = File.CreateText(recorderPath))
            {
                sw.WriteLine("record " + command);
            }
        }

        #endregion
    }

    /// <summary>
    /// Singleton pattern for handling several manager objects.
    /// </summary>
    public class GameManagersInformation
    {
        private static GameManagersInformation gameManagersInformation;

        public BindingList<GameManager> gameManagersList;

        private XmlSerializer serializer;

        private const string DATA_FILE = "gamemanagersinformation.xml";

        /// <summary>
        /// Allows for only one instance of GamesManagersInformation.
        /// Refers to the same instance everytime it is called.
        /// </summary>
        /// <returns></returns>
        public static GameManagersInformation Instance()
        {
            if (gameManagersInformation == null)
            {
                gameManagersInformation = new GameManagersInformation();
            }

            return gameManagersInformation;
        }

        /// <summary>
        /// Sets a container and serialization formatter for GameManagers
        /// </summary>
        private GameManagersInformation()
        {
            this.gameManagersList = new BindingList<GameManager>();
            this.serializer = new XmlSerializer(typeof(List<GameManager>));
        }

        /// <summary>
        /// Add a game manager to the list if it isn't already loaded.
        /// </summary>
        /// <param name="gm"></param>
        public void AddGameManager(GameManager gm)
        {
            if (this.gameManagersList.Contains(gm))
            {
                MessageBox.Show(gm.GamePath + " already exists.",
                                "Did Not Add",
                                MessageBoxButtons.OK,
                                MessageBoxIcon.Information);
            }
            else
            {
                this.gameManagersList.Add(gm);
            }
        }

        public void RemoveGameManager(string gameName)
        {
            gameManagersList.Remove(gameManagersList.SingleOrDefault(s => s.GameName == gameName));
        }

        public void Save()
        {
            using (FileStream writer =
                   new FileStream(DATA_FILE, FileMode.Create, FileAccess.Write))
            {
                this.serializer.Serialize(writer, gameManagersList.ToList());
            }
        }

        public void Load()
        {
            if (File.Exists(DATA_FILE))
            {
                using (FileStream reader =
                       new FileStream(DATA_FILE, FileMode.Open, FileAccess.Read))
                {
                    List<GameManager> loading = (List<GameManager>)serializer.Deserialize(reader);
                    gameManagersList = new BindingList<GameManager>();
                    foreach (var manager in loading)
                    {
                        gameManagersList.Add(manager);
                    }
                }
            }
        }

        public GameManager GetManager(string gameName)
        {
            GameManager ret = new GameManager();
            foreach (GameManager manager in gameManagersList)
            {
                if (manager.GameName == gameName)
                {
                    ret = manager;
                }
            }
            return ret;
        }

        public BindingList<GameManager> GetManagerList()
        {
            return gameManagersList;
        }

        public void Clear()
        {
            gameManagersList = new BindingList<GameManager>();
        }
    }


    /// <summary>
    /// Class designed to obtain information on a generic .dem file using the demo's header
    /// frame. Based on a php script found on valvesoftware.com "By: PoLaRiTy"
    /// </summary>
    public class Demo
    {
        #region Properties

        PropertyInfo[] _propertyInfos = null;

        public int DemoProtocol { get; set; }

        public int NetworkProtocol { get; set; }

        public string HostName { get; set; }

        public string ClientName { get; set; }

        public string MapName { get; set; }

        public string GameDir { get; set; }

        public float Time { get; set; }

        public string TimeInMinutes { get; set; }

        public int Ticks { get; set; }

        public int Frames { get; set; }

        public int TickRate
        {
            get
            {
                return Ticks / Convert.ToInt32(Time);
            }
        }

        public string Date
        {
            get
            {
                DateTime date = new DateTime();
                string pathEnd = Path.Split('\\').Last().Split('_')[1];

                if (pathEnd.EndsWith(".dem"))
                {
                    pathEnd.Remove(pathEnd.IndexOf(".dem"), 4);
                }

                DateTime.TryParse(pathEnd, out date);
                return String.Format("{0:D}", date);
            }
        }

        public string Path { get; set; }

        #endregion

        #region Constructors

        public Demo(string path)
        {
            this.Path = path;

            if (Path.EndsWith(".dem"))
            {
                using (BinaryReader r = new BinaryReader(File.Open(Path, FileMode.Open)))
                {
                    if (Encoding.ASCII.GetString(r.ReadBytes(8)) == "HL2DEMO\0")
                    {
                        DemoProtocol = r.ReadInt32();
                        NetworkProtocol = r.ReadInt32();
                        HostName = Encoding.ASCII.GetString(r.ReadBytes(260)).TrimEnd(new char[1]);
                        ClientName = Encoding.ASCII.GetString(r.ReadBytes(260)).TrimEnd(new char[1]);
                        MapName = Encoding.ASCII.GetString(r.ReadBytes(260)).TrimEnd(new char[1]);
                        GameDir = Encoding.ASCII.GetString(r.ReadBytes(260)).TrimEnd(new char[1]);
                        Time = r.ReadSingle();
                        Ticks = r.ReadInt32();
                        Frames = r.ReadInt32();
                    }
                }
            }
        }

        public Demo(string path, ZipArchiveEntry entry)
        {
            this.Path = path;
            using (BinaryReader r = new BinaryReader(entry.Open()))
            {
                if (Encoding.ASCII.GetString(r.ReadBytes(8)) == "HL2DEMO\0")
                {
                    DemoProtocol = r.ReadInt32();
                    NetworkProtocol = r.ReadInt32();
                    HostName = Encoding.ASCII.GetString(r.ReadBytes(260)).TrimEnd(new char[1]);
                    ClientName = Encoding.ASCII.GetString(r.ReadBytes(260)).TrimEnd(new char[1]);
                    MapName = Encoding.ASCII.GetString(r.ReadBytes(260)).TrimEnd(new char[1]);
                    GameDir = Encoding.ASCII.GetString(r.ReadBytes(260)).TrimEnd(new char[1]);
                    Time = r.ReadSingle();
                    Ticks = r.ReadInt32();
                    Frames = r.ReadInt32();
                }
            }
        }

        #endregion

        #region Class Methods

        public static List<List<Demo>> DemoLists(GameManager gm)
        {
            var demoLists = new List<List<Demo>>();

            if (!String.IsNullOrWhiteSpace(gm.DemosDirectory))
            {
                string[] archives = Directory.GetFiles(gm.DemosDirectory);

                foreach (var a in archives)
                {
                    if (a.EndsWith(".zip"))
                    {
                        List<Demo> demos = new List<Demo>();
                        using (var zip = ZipFile.OpenRead(a))
                        {
                            foreach (var entry in zip.Entries)
                            {
                                string path = a.Remove(a.IndexOf(".zip"), 4) + "\\";
                                Demo dem = new Demo(path + entry.FullName, entry);
                                demos.Add(dem);
                            }
                        }
                        demoLists.Add(demos);
                    }
                }
            }
            return demoLists;
        }

        public override string ToString()
        {

            if (_propertyInfos == null)
            {
                _propertyInfos = this.GetType().GetProperties();
            }

            StringBuilder builder = new StringBuilder();

            foreach (var info in _propertyInfos)
            {
                var val = info.GetValue(this, null) ?? "(null)";
                builder.Append(info.Name + ": " + val.ToString() + "\n");
            }

            return builder.ToString();
        }
        #endregion 
    }
}

